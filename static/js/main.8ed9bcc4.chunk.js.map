{"version":3,"sources":["components/Hive.js","components/Buttons.js","components/AnswerLengthGraph.js","components/WordList.js","components/InputField.js","App.js","index.js"],"names":["containerStyle","display","justifyContent","hexagonStyle","fill","strokeLinecap","strokeLinejoin","strokeWidth","stroke","cursor","textStyle","fontWeight","fontSize","dominantBaseline","textAnchor","userSelect","hiveStyle","width","maxWidth","margin","Hive","centerLetter","otherLetters","addLetter","toUpperCase","map","letter","style","xmlns","version","viewBox","id","points","href","x","y","onClick","height","buttonStyle","border","borderRadius","padding","color","background","refreshButtonStyle","Buttons","shuffleLetters","deleteLetter","submitWord","cx","cy","r","x1","y1","x2","y2","AnswerLengthGraph","foundWords","answerLengths","maxLength","Math","max","Object","keys","foundWordLengths","wordLength","word","length","toString","labels","i","push","answerSeries","value","foundWordSeries","differenceSeries","data","series","textAlign","options","low","stackBars","onlyInteger","type","flexDirection","flex","wordListStyle","flexWrap","wordListItemStyle","borderBottom","minWidth","WordList","numOfAnswers","sort","a","b","key","backgroundColor","Set","toLowerCase","split","size","charAt","substring","fontStyle","name","minHeight","InputField","playerInput","random","includes","visibility","nameInputStyle","halfContainerStyle","errorStyle","borderTop","App","socket","useState","setFoundWords","letters","setLetters","setCenterLetter","setNumOfAnswers","error","setError","setPlayerInput","localStorage","getItem","playerName","setPlayerName","nameFieldValue","setNameFieldValue","setAnswerLengths","useEffect","emit","roomId","on","console","log","setTimeout","onSubmit","e","preventDefault","setItem","placeholder","onChange","target","filter","filteredLetters","j","floor","temp","textDecoration","io","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ed9bcc4.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst containerStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n};\r\nconst hexagonStyle = {\r\n    fill: '#e6e6e6',\r\n    strokeLinecap: 'round',\r\n    strokeLinejoin: 'round',\r\n    strokeWidth: '6px',\r\n    stroke: 'white',\r\n    cursor: 'pointer'\r\n};\r\nconst textStyle = {\r\n    fontWeight: 'bold',\r\n    fontSize: '32px',\r\n    dominantBaseline: 'middle',\r\n    textAnchor: 'middle',\r\n    userSelect: 'none',\r\n    cursor: 'pointer'\r\n};\r\nconst hiveStyle = {\r\n    width: '75%',\r\n    maxWidth: '400px',\r\n    margin: '1em auto 2em'\r\n};\r\n\r\nconst Hive = ({ centerLetter = '', otherLetters = [], addLetter }) => {\r\n    centerLetter = centerLetter.toUpperCase();\r\n    otherLetters = otherLetters.map((letter) => letter.toUpperCase());\r\n\r\n    return (\r\n        <div style={containerStyle}>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 250 259.8\" style={hiveStyle}>\r\n                <defs>\r\n                    <symbol id=\"hexagon\">\r\n                        <polygon points={\"25 0, 75 0, 100 43.3, 75 86.6, 25 86.6, 0 43.3\"} />\r\n                    </symbol>\r\n                    <symbol id=\"top\">\r\n                        <use href=\"#hexagon\" style={hexagonStyle} />\r\n                        <text x=\"50%\" y=\"55%\" style={textStyle}>\r\n                            {otherLetters[0]}\r\n                        </text>\r\n                    </symbol>\r\n                    <symbol id=\"top-left\">\r\n                        <use href=\"#hexagon\" style={hexagonStyle} />\r\n                        <text x=\"50%\" y=\"55%\" style={textStyle}>\r\n                            {otherLetters[1]}\r\n                        </text>\r\n                    </symbol>\r\n                    <symbol id=\"top-right\">\r\n                        <use href=\"#hexagon\" style={hexagonStyle} />\r\n                        <text x=\"50%\" y=\"55%\" style={textStyle}>\r\n                            {otherLetters[2]}\r\n                        </text>\r\n                    </symbol>\r\n                    <symbol id=\"bottom-left\">\r\n                        <use href=\"#hexagon\" style={hexagonStyle} />\r\n                        <text x=\"50%\" y=\"55%\" style={textStyle}>\r\n                            {otherLetters[3]}\r\n                        </text>\r\n                    </symbol>\r\n                    <symbol id=\"bottom-right\">\r\n                        <use href=\"#hexagon\" style={hexagonStyle} />\r\n                        <text x=\"50%\" y=\"55%\" style={textStyle}>\r\n                            {otherLetters[4]}\r\n                        </text>\r\n                    </symbol>\r\n                    <symbol id=\"bottom\">\r\n                        <use href=\"#hexagon\" style={hexagonStyle} />\r\n                        <text x=\"50%\" y=\"55%\" style={textStyle}>\r\n                            {otherLetters[5]}\r\n                        </text>\r\n                    </symbol>\r\n                    <symbol id=\"center\">\r\n                        <use href=\"#hexagon\" style={{ ...hexagonStyle, fill: '#facd04' }} />\r\n                        <text x=\"50%\" y=\"55%\" style={textStyle}>\r\n                            {centerLetter}\r\n                        </text>\r\n                    </symbol>\r\n                </defs>\r\n\r\n                <use href=\"#top\" onClick={() => addLetter(otherLetters[0])} x=\"75\" y=\"0\" width=\"100\" height=\"86.6\" />\r\n                <use href=\"#top-left\" onClick={() => addLetter(otherLetters[1])} x=\"0\" y=\"43.3\" width=\"100\" height=\"86.6\" />\r\n                <use href=\"#top-right\" onClick={() => addLetter(otherLetters[2])} x=\"0\" y=\"129.9\" width=\"100\" height=\"86.6\" />\r\n                <use href=\"#bottom-left\" onClick={() => addLetter(otherLetters[3])} x=\"150\" y=\"43.3\" width=\"100\" height=\"86.6\" />\r\n                <use href=\"#bottom-right\" onClick={() => addLetter(otherLetters[4])} x=\"150\" y=\"129.9\" width=\"100\" height=\"86.6\" />\r\n                <use href=\"#bottom\" onClick={() => addLetter(otherLetters[5])} x=\"75\" y=\"173.2\" width=\"100\" height=\"86.6\" />\r\n                <use href=\"#center\" onClick={() => addLetter(centerLetter)} x=\"75\" y=\"86.6\" width=\"100\" height=\"86.6\" />\r\n            </svg>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Hive;\r\n","import React from 'react';\r\n\r\nconst containerStyle = {\r\n    display: 'flex',\r\n    justifyContent: 'center'\r\n};\r\nconst buttonStyle = {\r\n    border: '1px solid #e6e6e6',\r\n    borderRadius: '2em',\r\n    padding: '.5em 1em',\r\n    color: 'black',\r\n    margin: '1em',\r\n    background: 'transparent',\r\n    fontSize: '1em',\r\n    cursor: 'pointer'\r\n};\r\nconst refreshButtonStyle = {\r\n    height: '1.5em',\r\n    padding: '.5em 0em .25em',\r\n}\r\n\r\nconst Buttons = ({ shuffleLetters, deleteLetter, submitWord }) => {\r\n    return (\r\n        <div style={containerStyle}>\r\n            <button style={buttonStyle} onClick={deleteLetter}>\r\n                Delete\r\n            </button>\r\n            <button style={buttonStyle} onClick={() => shuffleLetters()}>\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" version=\"1.1\" viewBox=\"0 0 100 100\" style={refreshButtonStyle}>\r\n                    <circle cx=\"50\" cy=\"50\" r=\"47\" stroke=\"black\" strokeWidth=\"6\" fill=\"white\" />\r\n                    <line x1=\"0\" y1=\"0\" x2=\"100\" y2=\"100\" strokeWidth=\"20\" stroke=\"white\" />\r\n                    <polygon points=\"18,0 18,20 38,20\" fill=\"black\" />\r\n                    <polygon points=\"82,100 82,80 62,80\" fill=\"black\" />\r\n                </svg>\r\n            </button>\r\n            <button style={buttonStyle} onClick={submitWord}>\r\n                Enter\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Buttons;","import React from 'react';\r\nimport ChartistGraph from 'react-chartist';\r\n\r\nconst AnswerLengthGraph = ({ foundWords = [], answerLengths = {} }) => {\r\n    const maxLength = Math.max(...Object.keys(answerLengths));\r\n    let foundWordLengths = {};\r\n    for (let value of foundWords) {\r\n        let wordLength = value.word.length.toString();\r\n\r\n        foundWordLengths[wordLength] = foundWordLengths[wordLength] ? foundWordLengths[wordLength] + 1 : 1;\r\n    }\r\n    let labels = [];\r\n    for (let i = 4; i <= maxLength; i++) {\r\n        labels.push(i);\r\n    }\r\n    let answerSeries = labels.map((value) => answerLengths[value] || 0);\r\n    let foundWordSeries = labels.map((value) => foundWordLengths[value] || 0);\r\n    let differenceSeries = answerSeries.map((value, i) => value - foundWordSeries[i]);\r\n\r\n    let data = {\r\n        labels,\r\n        series: [\r\n            foundWordSeries,\r\n            differenceSeries\r\n        ]\r\n    };\r\n\r\n    let options = {\r\n        low: 0,\r\n        stackBars: true,\r\n        onlyInteger: true\r\n    };\r\n\r\n    let type = 'Bar'\r\n    return (\r\n        <div style={{\r\n            textAlign: 'center',\r\n            padding: '2em 1.5em 0em 0em'\r\n        }}\r\n        >\r\n            <ChartistGraph data={data} options={options} type={type} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AnswerLengthGraph;","import React from 'react';\r\n\r\nimport AnswerLengthGraph from './AnswerLengthGraph';\r\n\r\nconst containerStyle = {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    border: '1px solid #e6e6e6',\r\n    borderRadius: '.5em',\r\n    padding: '1em 1.5em',\r\n    margin: '1em',\r\n    flex: '1'\r\n};\r\nconst wordListStyle = {\r\n    display: 'flex',\r\n    flexDirection: 'row',\r\n    flexWrap: 'wrap'\r\n};\r\nconst wordListItemStyle = {\r\n    margin: '.25em 0',\r\n    borderBottom: '1px solid #e6e6e6',\r\n    width: '50%',\r\n    minWidth: '8em'\r\n};\r\n\r\nconst WordList = ({ foundWords = [], numOfAnswers = 0, answerLengths }) => {\r\n    foundWords = foundWords.sort((a, b) => a.word > b.word);\r\n    return (\r\n        <div style={containerStyle} >\r\n            <div style={{ margin: '0 0 1em' }}>\r\n                You have found {foundWords.length} out of {numOfAnswers} words\r\n            </div>\r\n            <div style={wordListStyle}>\r\n                {foundWords.map((value) => (\r\n                    <div style={wordListItemStyle} key={value.word}>\r\n                        <span style={{\r\n                            backgroundColor: (new Set(value.word.toLowerCase().split(''))).size === 7 ? '#facd04' : 'transparent'\r\n                        }}>\r\n                            {`${value.word.charAt(0).toUpperCase()}${value.word.substring(1, value.word.length).toLowerCase()}`}\r\n                        </span>\r\n                        <span style={{\r\n                            fontSize: '.8em',\r\n                            color: 'rgba(0, 0, 0, 0.4)',\r\n                            fontStyle: 'italic'\r\n                        }}> by {value.name}</span>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <AnswerLengthGraph\r\n                foundWords={foundWords}\r\n                answerLengths={answerLengths}\r\n            />\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default WordList;","import React from 'react';\r\n\r\nconst containerStyle = {\r\n    display: 'flex',\r\n    fontSize: '2.25em',\r\n    fontWeight: 'bold',\r\n    justifyContent: 'center',\r\n    margin: '.5em',\r\n    minHeight: '1em'\r\n};\r\n\r\nconst InputField = ({ centerLetter = '', otherLetters = '', playerInput = '' }) => {\r\n    return (\r\n        <div style={containerStyle}>\r\n            {playerInput.split('').map((letter) => (\r\n                <span key={Math.random()} style={\r\n                    letter === centerLetter ? { color: '#facd04' } : otherLetters.includes(letter) ? { color: 'black' } : { color: '#e6e6e6' }\r\n                }>\r\n                    {letter.toUpperCase()}\r\n                </span>\r\n            ))}\r\n            <span style={{ color: '#facd04', fontWeight: 'normal', visibility: 'hidden' }}>|</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default InputField;","import React, { useState, useEffect } from 'react';\r\n\r\nimport Hive from './components/Hive';\r\nimport Buttons from './components/Buttons';\r\nimport WordList from './components/WordList';\r\nimport InputField from './components/InputField';\r\n\r\nconst containerStyle = {\r\n  display: 'flex',\r\n  flexWrap: 'wrap',\r\n  minHeight: '100vh'\r\n};\r\n\r\nconst nameInputStyle = {\r\n  justifyContent: 'center',\r\n  maxWidth: '300px',\r\n  padding: '1em',\r\n  margin: '1em auto',\r\n  flexWrap: 'wrap'\r\n};\r\n\r\nconst halfContainerStyle = {\r\n  flex: '1 1 0',\r\n  minWidth: '300px',\r\n  display: 'flex',\r\n  flexDirection: 'column',\r\n};\r\n\r\nconst errorStyle = {\r\n  color: 'salmon',\r\n  padding: '.25em',\r\n  textAlign: 'center',\r\n  margin: '.5em',\r\n  borderTop: '1px solid salmon',\r\n  fontWeight: 'bold'\r\n};\r\n\r\nconst App = ({ socket }) => {\r\n  const [foundWords, setFoundWords] = useState([]);\r\n  const [letters, setLetters] = useState([]);\r\n  const [centerLetter, setCenterLetter] = useState('');\r\n  const [numOfAnswers, setNumOfAnswers] = useState(0);\r\n  const [error, setError] = useState('.');\r\n  const [playerInput, setPlayerInput] = useState('');\r\n  const [playerName, setPlayerName] = useState(localStorage.getItem('playerName') || '');\r\n  const [nameFieldValue, setNameFieldValue] = useState('');\r\n  const [answerLengths, setAnswerLengths] = useState({});\r\n  const roomId = 1;\r\n\r\n  useEffect(() => {\r\n    socket.emit(\"initRequest\", { roomId });\r\n\r\n    socket.on('initResponse', (data) => {\r\n      console.log(data);\r\n      setFoundWords(data.foundWords);\r\n      setLetters(data.letters);\r\n      setCenterLetter(data.centerLetter);\r\n      setNumOfAnswers(data.numOfAnswers);\r\n      setAnswerLengths(data.answerLengths);\r\n    });\r\n\r\n    socket.on('updateFoundWords', (data) => {\r\n      console.log('someone found a word');\r\n      console.log(data);\r\n      setFoundWords(data.foundWords);\r\n    });\r\n\r\n    socket.on('alreadyFound', (data) => {\r\n      console.log('already found ' + data);\r\n      setError(`Already found by ${data.name}`);\r\n      setTimeout(() => setError('.'), 3000);\r\n    });\r\n\r\n    socket.on('incorrectLetters', (data) => {\r\n      console.log('incorrect letters: ' + data);\r\n      setError('Incorrect letters');\r\n      setTimeout(() => setError('.'), 3000);\r\n    });\r\n\r\n    socket.on('noCenterLetter', (data) => {\r\n      console.log('no center letter: ' + data);\r\n      setError('Missing middle letter');\r\n      setTimeout(() => setError('.'), 3000);\r\n    });\r\n\r\n    socket.on('notInList', (data) => {\r\n      console.log('not in list: ' + data);\r\n      setError('Not in word list');\r\n      setTimeout(() => setError('.'), 3000);\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const addLetter = (letter) => {\r\n    setPlayerInput(playerInput + letter.toLowerCase());\r\n  };\r\n\r\n  const deleteLetter = () => {\r\n    setPlayerInput(playerInput.substring(0, playerInput.length - 1));\r\n  };\r\n\r\n  const shuffleLetters = () => {\r\n    let filteredLetters = letters.filter((value) => value !== centerLetter);\r\n    for (let i in filteredLetters) {\r\n      const j = Math.floor(Math.random() * i)\r\n      const temp = filteredLetters[i];\r\n      filteredLetters[i] = filteredLetters[j];\r\n      filteredLetters[j] = temp;\r\n    }\r\n    setLetters([centerLetter, ...filteredLetters]);\r\n  };\r\n\r\n  const submitWord = () => {\r\n    if (!playerInput) return;\r\n    socket.emit('submit', { word: playerInput, name: playerName, roomId });\r\n    console.log('submitting word: ' + playerInput);\r\n    setPlayerInput('');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form style={{ ...nameInputStyle, display: playerName ? 'none' : 'flex' }} onSubmit={(e) => {\r\n        e.preventDefault();\r\n        setPlayerName(nameFieldValue);\r\n        localStorage.setItem('playerName', nameFieldValue);\r\n      }}>\r\n        <input\r\n          type='text'\r\n          placeholder='Enter your name...'\r\n          value={nameFieldValue}\r\n          onChange={(e) => setNameFieldValue(e.target.value)}\r\n          style={{\r\n            flex: '1 0 100%',\r\n            margin: '.5em',\r\n            border: 'none',\r\n            borderBottom: '1px solid black'\r\n          }}\r\n        />\r\n        <button style={{\r\n          flex: '1 0 100%',\r\n          margin: '.5em'\r\n\r\n        }}>Enter</button>\r\n      </form>\r\n      <div style={{\r\n        textAlign: 'center',\r\n        display: letters.length ? 'none' : 'block'\r\n      }}>\r\n        <div>Loading...</div>\r\n        <br />\r\n        <p style={{ fontSize: '.75em' }}>...if you have the time to read this, there is probably something wrong.</p>\r\n      </div>\r\n      <div style={{ ...containerStyle, display: playerName && letters.length ? 'flex' : 'none' }}>\r\n        <div style={halfContainerStyle}>\r\n          <div style={{ ...errorStyle, visibility: error !== '.' ? 'visible' : 'hidden' }}>{error}</div>\r\n          <InputField\r\n            playerInput={playerInput}\r\n            centerLetter={centerLetter}\r\n            otherLetters={letters.filter((value) => value !== centerLetter)}\r\n          />\r\n          <Hive\r\n            centerLetter={centerLetter}\r\n            otherLetters={letters.filter((value) => value !== centerLetter)}\r\n            addLetter={addLetter}\r\n          />\r\n          <Buttons\r\n            shuffleLetters={shuffleLetters}\r\n            deleteLetter={deleteLetter}\r\n            submitWord={submitWord}\r\n          />\r\n        </div>\r\n        <div style={halfContainerStyle}>\r\n          <WordList\r\n            foundWords={foundWords}\r\n            numOfAnswers={numOfAnswers}\r\n            answerLengths={answerLengths}\r\n          />\r\n          <p\r\n            onClick={() => setPlayerName()}\r\n            style={{\r\n              textAlign: 'right',\r\n              color: 'rgba(0,0,0,.4)',\r\n              margin: '0 1em .25em',\r\n              textDecoration: 'underline',\r\n              fontStyle: 'italic',\r\n              cursor: 'pointer'\r\n            }}\r\n          >not {playerName}?</p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport io from 'socket.io-client';\r\n\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nconst socket = io(process.env.REACT_APP_SOCKET_URL || 'http://localhost:4000');\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App\r\n      socket={socket}\r\n    />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}